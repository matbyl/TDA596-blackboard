"""

  Name: handlers.repy
  Description: Handlers for all the requests

"""
include util.repy

def get_handler(endpoint):
  return mycontext['api'].get(endpoint)

def post_handler(endpoint, httpRequest):
  parameters = httpRequest.get_parameters()
  if parameters.has_key('delete'):
    if int(parameters['delete']) == 1:
      return mycontext['api'].delete(endpoint, httpRequest)
    else:
      return mycontext['api'].put(endpoint, httpRequest)
  else:
    return mycontext['api'].post(endpoint, httpRequest)

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_index():
  htmlresponse = generate_html_page()
  return make_http_response(200, 'OK', htmlresponse)

# ------------------------------------------------------------------------------
# Retrieves the result from a vote round
# ------------------------------------------------------------------------------
def get_result():
  htmlresponse = generate_html_page()
  agreement=None
  if mycontext['myresult']!=None:
    status=calculate_max_votes_in_list(mycontext['myresult'])

    if status==True:
        agreement='Attack'
    elif status==False:
        agreement = 'Retreat'
    else:
        agreement = 'Tied ,so attack'
    return make_http_response(201, 'Created', "Vote : " + str(mycontext['myresult'])+"<br />Agreement:"+agreement)
  else:
    return make_http_response(200, 'OK', "Awaiting to reach agreement ")

def vote(httpRequest):
    vote = httpRequest.get_parameter('vote')
    print "Voted: " + vote

    if  vote == 'byzantine':
        mycontext['generalstatus'] = 'Traitor'
    else:
        mycontext['generalstatus'] = 'Honest'
    
    mycontext['lock'].acquire()
    mycontext['nodes'].get(get_host()).set_general_status(mycontext['generalstatus'])
    mycontext['lock'].release()
    
    if  vote == 'byzantine':
        vote_byzantine()
    elif mycontext['myvote'] == None:
        mycontext['lock'].acquire()
        mycontext['myvote'] = vote == 'attack'
        mycontext['nodes'].get(get_host()).set_node_vote(mycontext['myvote'])
        mycontext['lock'].release()
        
        broadcast_my_vote()

    return make_http_response(201, 'Created', "Node is : " + mycontext['generalstatus'] +"<br />vote of node: " + vote)

  
def vote_byzantine():
  httpmessage = build_request_msg("byzantine")
  send_message(httpmessage)
  check_byzantine()
  print "vote received in byzantine node " + str(mycontext['votesreceived'])

  if mycontext['votesreceived'] == len(mycontext['nodes']) - 1:
      print "time to send next vector in byzantine node"
      broadcast_second_vote()


# method to calculate the number of traitor nodes
# only byzantine nodes use this method
def no_of_traitor_nodes():
    traitor_nodes = 0
    for key, node in mycontext['nodes'].iteritems():
        if node.get_general_status() == 'Traitor':
            traitor_nodes = traitor_nodes + 1

    return traitor_nodes

def check_byzantine():
    print "\n number of traitor nodes" + str(no_of_traitor_nodes())
    if mycontext['generalstatus'] == 'Traitor' and mycontext['votesreceived'] == (len(mycontext['nodes']) - no_of_traitor_nodes()):
      print "vote received in traitor to broadcast " + str(len(mycontext['nodes']))
      if mycontext['vote_broadcasted'] == False:
        broadcast_my_vote()
    elif mycontext['generalstatus'] == 'Traitor' and mycontext['votesreceived'] < (len(mycontext['nodes']) - no_of_traitor_nodes()):
      print "waiting for other node's votes to broadcast"


def first_vote_handler(host,method):
    node = mycontext['nodes'].get(host)
    # if vote of the node is not set then its a fresh vote and we add 1 to the received votes
    # this number will be used by the byzantine node to know whether it has received all the votes from the loyal nodes
    mycontext['lock'].acquire()
    if node.node_vote == None:
        mycontext['votesreceived'] = mycontext['votesreceived'] + 1
        node.set_node_vote(method.split(':')[1])
    if node.get_general_status() == None:
        node.set_general_status('Honest')

    mycontext['lock'].release()
    check_byzantine()
    if mycontext['votesreceived'] == len(mycontext['nodes']) - 1:
        print "time to send next vectors"
        broadcast_second_vote()

def second_vote_handler(host,msgheader):

    node = mycontext['nodes'].get(host)
    firstline = msgheader.split('\n', 1)[0]
    vector = parse_received_vector(firstline)
    mycontext['lock'].acquire()

    if node.get_received_vote() == None:
        mycontext['vectorreceived'] = mycontext['vectorreceived'] + 1
        node.set_received_vector(vector)
        print "\nreceived from " + str(host) + " vectornumber : " + str(mycontext['vectorreceived'])
        if mycontext['vectorreceived'] == len(mycontext['nodes']) - 1:
            for key, port in mycontext['nodes'].iteritems():
                port.print_received()
            mycontext['myresult']=calculate_voting_result()

    mycontext['lock'].release()
    currentnode=mycontext['nodes'].get(get_host())

    if currentnode.get_received_vote()==None or currentnode.get_received_vote()==[]:

        current_vector=[]
        for key, node in mycontext['nodes'].iteritems():
            current_vector.append(node.get_node_vote())
        currentnode.set_received_vector(current_vector)
    print "current node "+str(currentnode.get_received_vote())