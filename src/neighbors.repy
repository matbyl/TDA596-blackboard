###############################################################################
#
# Name: neighbors.repy
#
# Description: Functions to handle the neighbor connections
#
###############################################################################

include util.repy
include connection.repy
include sockettimeout.repy

# ------------------------------------------------------------------------------
# Retrieves all the neighbors
# ------------------------------------------------------------------------------
def get_all_neighbors():
  f = open('neighborlist.txt')

  hostIndex = 0
  port =  mycontext['port']

  neighbors = []
  neighborIndex = None

  for line in f.readlines():

    # only asasume we have a port when working locally
    if mycontext['ip'] == "127.0.0.1":
      ip = line.split(":")[0]
      port = int(line.split(":")[1])
    else:
      ip = line.strip('\n')

    host = ip + ":" + str(port)

    # Do not include current host (or int(data[1]) != mycontext['port'])
    if not isHost(host):
      neighbors.append(Connection(ip, port, hostIndex))

    elif neighborIndex == None:
    # After identifying the host we find the neighbor index
      neighborIndex=hostIndex

    # Increment host index when a new one has been added to the neighborlist
    hostIndex += 1

  mycontext['nearestNeighbor']=get_nearest_neighbor(neighborIndex,neighbors)

  return neighbors

# ------------------------------------------------------------------------------
#  Retrieves the nearest available neighbor from the ring, when the neighbor index is
#  bigger than the available neighbors it will reset the index to zero (ring topology)
#  #TODO  handling the failure node case
# ------------------------------------------------------------------------------
def get_nearest_neighbor(neighborIndex,neighbors):
  neighbor=None

  if neighborIndex > len(neighbors) - 1:
    neighborIndex=0

  return neighbors[neighborIndex]

# ------------------------------------------------------------------------------
#  Retrieves the next nearest available neighbor from the ring
# ------------------------------------------------------------------------------
def get_next_nearest_neighbor(nearestNeighbor, neighbors):
  return neighbors[neighbors.index(nearestNeighbor) + 1 % len(neighbors)]
