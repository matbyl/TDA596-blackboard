include api.repy
include neighbors.repy
include election.repy
include handlers.repy


# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']

  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass



# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, socketobj, thiscommhandle, listencommhandle):
  try:
    msgheader = socketobj.recv(1024)
    query = extract_http_request_contents(msgheader)
    host = extract_http_request_header_value(msgheader, "host")

    if msgheader.startswith('ping'):
      print "ping received"
      ip = host.split(':')[0]
      port = host.split(':')[1]
      c = Connection(ip, port, 0)
      c.send_pong()
      print "pong sent to "+str(port)
    elif msgheader.startswith('pong'):
      print "pong received"
      start_sending_election()
    elif msgheader.startswith('Election '):
      election_message_handler(msgheader)
    elif msgheader.startswith('Update'):
      mycontext['entries'] = ms
    elif mycontext['leader'] != None:
      
      if query:
        parameters = extract_parameters_from_query(query)
      
      res = ''
      method = msgheader.split(' ')[0]
      endpoint = msgheader.split(' ')[1]

      if method == 'GET':
          res = get_handler(endpoint)
      elif isHost(mycontext['leader'].get_host()) or host == mycontext['leader'].get_host():
        
        # React depending on message type: HTTP GET or POST, or some other type of communication.
        if method == 'POST':
          res = post_handler(endpoint, parameters)
        elif method == 'PUT':
          res = mycontext['api'].put(endpoint, parameters)
        elif method == 'DELETE':
          res = mycontext['api'].delete(endpoint)
        
        msgheader = msgheader.replace(host, get_host())

        if isHost(mycontext['leader'].get_host()):
          for neighbor in mycontext['neighbors']:
            neighbor.send_msg(msgheader)
      else:
        mycontext['leader'].send_msg(msgheader) 

      if res:
        socketobj.send(res)
        

      stopcomm(thiscommhandle)

  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    print "message of exception :"+str(e)


# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():

  # dynamic title showing Ip address, port and up time.
  title='Sample board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  content = mycontext['boardcontents_template'] %( title, "".join(mycontext['entries'].values()))
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  return fullpage

# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # DEFINE GLOBALS
  mycontext['entries'] = {}
  mycontext['lock'] = getlock()
  mycontext['timer'] = None

  api = Api()

  handlers = {
    'GET': get_board
  }
  api.add_resource(handlers, ['/', '/board'])

  handlers = {
    'POST': add_entry,
    'DELETE': remove_entry,
    'PUT': modify_entry
  }
  api.add_resource(handlers, ['/entries'])

  mycontext['api'] = api

  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> main.repy <port> [ip (optional)]")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip

  # Nearest neighbor of the current host
  mycontext['nearestNeighbor'] = None
  # NOTE: nearestNeighbor will also be added when all neighbors are added
  mycontext['neighbors'] = get_all_neighbors()
  mycontext['leader']=None
  mycontext['election'] = Election(int(randomfloat()*1000), get_host(), mycontext['nearestNeighbor'])
  print "Neighbor" + str(mycontext['nearestNeighbor'])

  # Start election
  mycontext['electionhandle']=None
  settimer(10, start_election, [])

  print "\nElection data to send: \n" + mycontext['election'].get_message() + "\n"

  #read html template files
  mycontext['entry_template'] = open("entry_template.html").read()
  mycontext['boardcontents_template'] = open("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = open("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = open("board_frontpage_footer_template.html").read()

  mycontext['authors'] = "Mathias Bylund, Anton Rose"

  start_board()