include api.repy
include neighbors.repy
include handlers.repy
include vectorClock.repy
include httprequest.repy

# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']

  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, socketobj, thiscommhandle, listencommhandle):
  try:
    msgheader = socketobj.recv(1024)

    httpRequest = HttpRequest()
    httpRequest.parse(msgheader)
    
    # print httpRequest.get_info()

    parameters = httpRequest.get_parameters()
    method = httpRequest.method
    endpoint = httpRequest.uri
    host = httpRequest.get_host()

    res = ''
  
    if method == 'GET':
      if endpoint != "/favicon.ico":
        res = get_handler(endpoint)

    # React depending on message type: HTTP GET or POST, or some other type of communication.
    elif method == 'POST':

      # If the message is not from the host we need to account for the timestamp of the message recieved
      if isHost(host):
        mycontext['clock'].tick()
        print mycontext['clock']
      else:
        mycontext['clock'].update(host, httpRequest.get_header('Host-Timestamp'))
        print mycontext['clock']

      res = post_handler(endpoint, parameters)

    elif method == 'PUT':
      res = mycontext['api'].put(endpoint, parameters)
    elif method == 'DELETE':
      res = mycontext['api'].delete(endpoint)
    
    if res:
      socketobj.send(res)
  
    stopcomm(thiscommhandle)

    if isHost(host) and method == 'POST':
      
      httpRequest.add_header('Host-Timestamp', mycontext['clock'].get_timestamp(host))

      for neighbor in mycontext['neighbors']:
        neighbor.send_msg(httpRequest.get_request())    

  except Exception, e:
    print "\nException in board: %s, %s" %(type(e), e)

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():

  # dynamic title showing Ip address, port and up time.
  title='Sample board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  content = mycontext['boardcontents_template'] %( title, "".join(mycontext['entries'].values()))
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  return fullpage

# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # DEFINE GLOBALS
  mycontext['entries'] = {}
  mycontext['lock'] = getlock() 

  api = Api()

  handlers = {
    'GET': get_board
  }
  api.add_resource(handlers, ['/', '/board'])

  handlers = {
    'POST': add_entry,
    'DELETE': remove_entry,
    'PUT': modify_entry
  }
  api.add_resource(handlers, ['/entries'])

  mycontext['api'] = api

  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> main.repy <port> [ip (optional)]")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  mycontext['connection'] = Connection(ip, port)


  # Nearest neighbor of the current host
  mycontext['neighbors'] = get_all_neighbors()

  # we need the host before we initialize the vectorclock
  mycontext['clock'] = VectorClock(mycontext['connection'].get_host())
  # Add all neighbors to the vector clock
  for neighbor in mycontext['neighbors']:
    mycontext['clock'].add_clock(neighbor.get_host())

  #read html template files
  mycontext['entry_template'] = open("entry_template.html").read()
  mycontext['boardcontents_template'] = open("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = open("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = open("board_frontpage_footer_template.html").read()

  mycontext['authors'] = "Mathias Bylund, Anton Rose"

  start_board()