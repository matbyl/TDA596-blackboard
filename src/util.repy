# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Util module
#
# Description: This module should contain functions that are useful in several
# case. 
#
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse=''):
  response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html;charset=UTF-8\r\nContent-length: %s\r\n\r\n%s"
  res = response_template % (status, status_text, str(len(htmlresponse)), htmlresponse)
  return res

# ------------------------------------------------------------------------------
#  Creates a 404 response to display in HTTP request
# ------------------------------------------------------------------------------
def make_404_response(msgheader):
  # Do not mix HTML code with the server code as done here. This is a bad practice
  template = '<html><head><style>.status {color: red;font-size: 75%%;}</style></head><body><pre><samp class="status">%s</samp></pre></body><html>'
  htmlresponse = template % ("404 Not Found\n" + msgheader)
  res = make_http_response(404, 'Not Found', htmlresponse)


# ------------------------------------------------------------------------------
#  Creates a 404 response to display in HTTP request
# ------------------------------------------------------------------------------
def make_post_request(msgheader, entry):
  template = '{"entry": %s}'
  htmlresponse = template % entry
  return make_http_response(200, 'OK', htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  try:
    content_length = header.split('Content-Length: ')[1]
    content_length = int(content_length.split('\r\n')[0])

    # extract the http response body and discard the header
    contents = header[-content_length:]
    return contents
  except Exception:
    return False

# ------------------------------------------------------------------------------
# Utility function to extract the value from a given header
# ------------------------------------------------------------------------------
def extract_http_request_header_value(headers, header):
  try:
    # Split on the color and extract the value part
    tail = headers.split(header.capitalize() + ': ')[1]
    # Strip newline and return only the value
    value = tail.split('\r\n')[0]

    # If no value is found we raise an excetion

    if value == []:
      raise Exception
    
    return value
  except Exception:
    print "Unable to extract" + header + " from http request"
    return False

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters


# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():

  # dynamic title showing Ip address, port and up time.
  title='Host: %s:%d <br /> Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  content = mycontext['boardcontents_template'] %( title, "".join(generate_entries()))
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  fullpage = ''.join(fullpage.split('\t'))
  return ''.join(fullpage.split('\n'))

# ------------------------------------------------------------------------------
# Retrieves all entries in a sorted fashion according to their given timestamp
# ------------------------------------------------------------------------------  
def generate_entries():
  entry_objects = mycontext['entries'].values()
  entry_objects.sort(compare_entries)
  entries = map(get_entry_html, entry_objects)
  return entries

# ------------------------------------------------------------------------------
# Helper function to map entry objects to a list with corresponding html-items
# ------------------------------------------------------------------------------  
def get_entry_html(entry):
  return entry.get_html()

# ------------------------------------------------------------------------------
# Compares two entries timestamps, in the case that they are equal the host that
# generated the entry is compared instead
# ------------------------------------------------------------------------------  
def compare_entries(e1, e2):
  if e1.get_timestamp() == e2.get_timestamp():
    return e1.get_host() > e2.get_host()
  return e1.get_timestamp() < e2.get_timestamp()

# ------------------------------------------------------------------------------
# Utility function to parse an endpoint
# ------------------------------------------------------------------------------
def parse_endpoint(endpoint):
  parts = endpoint.split('/')
  return {
    "resource": "/" + parts[0],
    "id": parts[1]
  }

def generate_entry(msgid, msg):
  return mycontext['entry_template'] % ('entries/%d' % (msgid), msgid, msg)

def isHost(host):
  thisHost = get_host()
  return thisHost == host

def get_host():
  return str(mycontext['ip']) + ":" + str(mycontext['port'])