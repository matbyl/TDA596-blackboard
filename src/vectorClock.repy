###############################################################################
#
# Name: vectorClock.repy
#
# Description: A class to handle the logical clocks of vessels
#
###############################################################################

class VectorClock:

    def __init__ (self, host):
        self.host = host
        self.clocks = {}
        self.add_clock(host)

    def __str__(self):
        message = ""

        for host, timestamp in self.clocks.iteritems():
            message += "\nHost: %s\nTimestamp: %s\n" % (host, timestamp)

        return message

    def get_timestamp(self, host):
        return str(self.clocks[host])

    def add_clocks(self, hosts):
        for host in hosts:
            self.add_clock(host)

    # Add a new clock to the vector
    def add_clock(self, host):
        self.clocks[host] = 0

    # Check to determine if a clock is already added
    def has_clock(self, host):
        return host in self.clocks    
    
    # Ticks the logical clock for this host
    def tick(self):
        self.clocks[self.host] = self.clocks[self.host] + 1

    # Updates the timestamp to the highest value between message recieved and current logical time
    def update(self, host, timestamp):
        self.clocks[host] = max(self.clocks[host], int(timestamp))
        self.tick()