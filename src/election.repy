###############################################################################
#
# Name: election.repy
#
# Description: Class that handles the election process
#
###############################################################################

class Election:

  def __init__(self,id,initiator, neighbor):
    self.id=id
    self.initiator = get_host()
    self.neighbor = neighbor
    self.nodes = []
    self.leader = get_host()
    self.leaderId=id

  def get_election_message(self):

    message=" ID: %s" % str(self.id)+'\n'
    message=message+"Initiator: %s" % str(self.initiator)+'\n'
    message = message + "Neighbor: %s" % str(self.neighbor) + '\n'
    message = message + "Nodes: %s" % str(self.nodes) + '\n'
    message = message + "Leader: %s" % str(self.leader)

    return message

  def get_message(self):
      message = "Initiator: %s" % str(self.initiator)+'\n'
      message=message+"Leader host: %s" % str(self.leader)+'\n'
      message = message+ "Leader Id: %s" % str(self.leaderId)

      return message

  def __str__(self):
    return """
    ID: {id}
    Initiator:{initiator}
    Neighbor: {neighbor}
    Nodes: {nodes}
    Leader: {leader}
    """.format(id = self.id,initiator=self.initiator,nodes = self.nodes, leader = self.leader, neighbor = self.neighbor)

  def add_node(nodeID):
    if(mycontext['hostId'] == nodeID):
      end_election()
    else:
      nodes.append(nodeID)


  def end_election(self):
    self.leader = max(self.nodes)
    self.nodes = []


def start_election():
  ip = mycontext['ip']
  port = mycontext['port']

  mycontext['election'].neighbor.send_ping()
  print "\n===========================\nStarting election\n===========================\n"

def start_sending_election():
  message='Election \n'+mycontext['election'].get_message()
  mycontext['election'].neighbor.send_msg(message)