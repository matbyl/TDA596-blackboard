# Handler module

include util.repy
include uniqueid.repy

def get_handler(endpoint):
    # if any thread has entered the election , then do nothing
    # if not trigger the election from this thread

    # ping nearest neighbor ,
    # if alive then start the election and release lock
    # if not alive , ping next nearest neighbor
    # repeat

  return mycontext['api'].get(endpoint)



def post_handler(endpoint, httpRequest):
  parameters = httpRequest.get_parameters()

  if parameters.has_key('delete'):
    if int(parameters['delete']) == 1:
      return mycontext['api'].delete(endpoint)
    else:
      print parameters
      return mycontext['api'].put(endpoint, httpRequest)
  else:
    return mycontext['api'].post(endpoint, httpRequest)

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board():
  htmlresponse = generate_html_page()
  return make_http_response(200, 'OK', htmlresponse)


# ------------------------------------------------------------------------------
# Creates and adds a new entry to the global variable entries
# ------------------------------------------------------------------------------
def add_entry(httpRequest):
  try:
    parameters = httpRequest.get_parameters()
    mycontext['lock'].acquire()
    
    msg = parameters['entry']
    msgid = uniqueid_getid()
    entry = generate_entry(msgid, msg)
    mycontext['entries'][msgid] = entry

    mycontext['lock'].release()

    return make_http_response(201, 'Created', "Added new entry! <br />ID: " + str(msgid) + "<br />Message: " + msg)

  except Exception:
    raise Exception("Unable to handle add_entry request")


def remove_entry(msgid):
  try:
    mycontext['lock'].acquire()
    del mycontext['entries'][msgid]
    mycontext['lock'].release()
    return make_http_response(200, 'OK', "Removed entry: " + str(msgid))
    
  except Exception:
    raise Exception("Unable to remove entry")

def modify_entry(msgid, httpRequest):
  try:
    parameters = httpRequest.get_parameters()

    msg = parameters['entry']
    mycontext['lock'].acquire()
    mycontext['entries'][msgid] = generate_entry(msgid, msg)
    mycontext['lock'].release()
    return make_http_response(200, 'OK', "Modified entry: " + str(msgid))
   
  except Exception:
    raise Exception("Unable to modify entry")